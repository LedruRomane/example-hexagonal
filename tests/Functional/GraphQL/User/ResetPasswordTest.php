<?php

declare(strict_types=1);

namespace App\Tests\Functional\GraphQL\User;

use App\Domain\User\ResetPasswordRequest;
use App\Domain\User\User;
use App\Infrastructure\Fixtures\Factory\UserFactory;
use App\Infrastructure\Test\Functional\Controller\GraphQLTestCase;
use App\Infrastructure\User\Repository\ResetPasswordRequestRepository;
use Symfony\Bundle\FrameworkBundle\Test\MailerAssertionsTrait;
use SymfonyCasts\Bundle\ResetPassword\ResetPasswordHelperInterface;
use Zenstruck\Foundry\Test\Factories;
use Zenstruck\Foundry\Test\ResetDatabase;

class ResetPasswordTest extends GraphQLTestCase
{
    use ResetDatabase;
    use Factories;
    use MailerAssertionsTrait;

    public function testSuccessfulResetPassword(): void
    {
        /** @var User $user */
        $user = UserFactory::find(['email' => 'admin@example.com'])->object();

        $resetHelper = self::getService(ResetPasswordHelperInterface::class);

        $token = $resetHelper->generateResetToken($user);

        $this->executeGraphQL([
            'token' => $token->getToken(),
            'payload' => [
                'newPassword' => $newPassword = 'n3w-p@55w0rd-clj2m7tux0002n322czog4kbh',
                'newPasswordConfirm' => $newPassword,
            ],
        ], $this->getInputContent('testResetPassword'));

        $this->assertValidGraphQLResponse();
        $this->assertJsonResponseMatchesExpectations();

        self::assertSame($newPassword, $user->getPassword(), 'The new password was set');
    }

    public function testResetPasswordWithInvalidToken(): void
    {
        $this->executeGraphQL([
            'token' => 'invalid-token',
            'payload' => [
                'newPassword' => 'n3w-p@55w0rd-clj2m7tux0002n322czog4kbh',
                'newPasswordConfirm' => 'n3w-p@55w0rd-clj2m7tux0002n322czog4kbh',
            ],
        ], $this->getInputContent('testResetPassword'));

        $this->assertGraphQLCustomUserErrorResponse('Le lien de réinitialisation du mot de passe n\'est pas valide. %s');
    }

    public function testResetPasswordWithExpiredToken(): void
    {
        /** @var User $user */
        $user = UserFactory::find(['email' => 'admin@example.com'])->object();

        $resetHelper = self::getService(ResetPasswordHelperInterface::class);
        $repository = self::getService(ResetPasswordRequestRepository::class);
        $doctrine = self::getManager();

        // Even with a negative TTL, the token is still valid due to how it is generated by the bundle:
        $token = $resetHelper->generateResetToken($user, -10);
        // So let's make the token expire manually:
        /** @var ResetPasswordRequest $request */
        $request = $repository->findOneBy(['user' => $user]);
        $request->expire();

        $doctrine->flush();

        $this->executeGraphQL([
            'token' => $token->getToken(),
            'payload' => [
                'newPassword' => $newPassword = 'n3w-p@55w0rd-clj2m7tux0002n322czog4kbh',
                'newPasswordConfirm' => $newPassword,
            ],
        ], $this->getInputContent('testResetPassword'));

        $this->assertGraphQLCustomUserErrorResponse('Le lien dans votre e-mail est expiré. %s');
    }

    public function testResetPasswordWithNonMatchingPasswords(): void
    {
        $this->executeGraphQL([
            'token' => '01H26252VG9TXW6CFFTYKAVT3X',
            'payload' => [
                'newPassword' => 'a-password',
                'newPasswordConfirm' => 'a-different-password',
            ],
        ], $this->getInputContent('testResetPassword'));

        $this->assertGraphQLInvalidPayloadResponse();
        $this->assertJsonResponseMatchesExpectations();
    }
}
